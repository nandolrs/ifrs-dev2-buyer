package ifrs.dev2.buyer.api;

import ifrs.dev2.buyer.dados.Usuario;
import ifrs.dev2.buyer.repositorios.UsuarioRepository;
import ifrs.dev2.buyer.dados.UsuarioAutenticador;
import ifrs.dev2.buyer.erros.ErroBase;
import ifrs.dev2.buyer.erros.ErroItem;
import ifrs.dev2.buyer.repositorios.UsuarioAutenticadorRepository;
import ifrs.dev2.buyer.respostas.UsuarioAutenticadorResponse;

import ifrs.dev2.buyer.segurancas.Cripto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.Calendar;
import java.util.Date;
import java.util.List;


@RestController
@RequestMapping(path="/api/usuarioautenticador")

public class UsuarioAutenticadorController {

    long ID_NAO_ENCONTRADO = -1;

    @Autowired // This means to get the bean called UsuarioRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    private UsuarioAutenticadorRepository repositorio;

    @Autowired // This means to get the bean called UsuarioRepository
    private UsuarioRepository repositorioUsuario;


    @GetMapping(
            value = "autenticar"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )

    public @ResponseBody
    UsuarioAutenticadorResponse Autenticar (@RequestHeader HttpHeaders headers, @RequestParam String email, @RequestParam String senha) throws Exception {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try
        {
            List<Usuario> usuarioLista = null;

            Usuario usuario = new Usuario();

            if(email.length() > 0)
            {
                usuarioLista = repositorioUsuario.findByEmail(email);
                Integer tamanho = usuarioLista.size();
                if (tamanho.compareTo(0) == 1){
                    usuario = usuarioLista.get(0);
                    Cripto cripto = new Cripto();
                    String senhaFechada = cripto.CifrarSenha(senha);
                    if (senhaFechada.equals(usuario.getSenha()) ){
                        UsuarioAutenticador entidade = new UsuarioAutenticador();
                        entidade.setUsuario(usuario);
                        entidade.setDatalogin(new Date());

                        Calendar calendario = Calendar.getInstance();

                        calendario.setTime(new Date());
                        calendario.add(Calendar.HOUR_OF_DAY,24);
                        Date dataFutura = calendario.getTime();
                        entidade.setTempoSessao(dataFutura);

                        entidade = repositorio.save(entidade);

                        String token = cripto.CifrarSenha(entidade.getId().toString());
                        entidade.setSessao(token);

                        entidade = repositorio.save(entidade);

                        UsuarioAutenticadorResponse respFront = new UsuarioAutenticadorResponse( entidade,null,null);
                        respFront.setConfirmacao("Sucesso!");
                        return respFront;

                    }

                    else{
                        UsuarioAutenticador entidade = new UsuarioAutenticador();
                        return new UsuarioAutenticadorResponse( entidade,null,null);
                    }

                }

                else {

                    UsuarioAutenticador entidade = new UsuarioAutenticador();
                    return new UsuarioAutenticadorResponse( entidade,null,null);
                }
            }

            else {

                UsuarioAutenticador entidade = new UsuarioAutenticador();
                return new UsuarioAutenticadorResponse( entidade,null,null);

            }
        }



        catch (Exception e)
        {
            String msg = "ERROOU!";

            ErroItem item = new ErroItem("",msg,-1L);
            //ErroBase erroBase = new ErroBase(e);
            ErroBase erroBase = new ErroBase(item);

            UsuarioAutenticadorResponse retorno = new UsuarioAutenticadorResponse(null, erroBase, null) ;
            return retorno;
        }

    }


    @GetMapping(
            path="consultar/{sessao}"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody
    UsuarioAutenticadorResponse Consultar(@RequestHeader HttpHeaders headers, @PathVariable String sessao) {

        UsuarioAutenticador retorno = new UsuarioAutenticador();
        try
        {

            retorno  = repositorio.findBySessao(sessao).get();


            return new UsuarioAutenticadorResponse( retorno,null,null);
        }

        catch (Exception e)
        {
            retorno.setId(ID_NAO_ENCONTRADO);

            String msg = "ERROOU!";

            ErroItem item = new ErroItem("",msg,-1L);
            //ErroBase erroBase = new ErroBase(e);
            ErroBase erroBase = new ErroBase(item);

            return  new UsuarioAutenticadorResponse(null, erroBase, null) ;

        }
    }
}
