package ifrs.dev2.buyer.api;



import ifrs.dev2.buyer.dados.Usuario;

import ifrs.dev2.buyer.erros.ErroBase;
import ifrs.dev2.buyer.erros.ErroItem;
import ifrs.dev2.buyer.respostas.UsuarioResponse;
import ifrs.dev2.buyer.segurancas.Cripto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.Comparator;
import java.util.List;


@RestController
@RequestMapping(path="/api/usuario")
public class UsuarioController  {

    long ID_NAO_ENCONTRADO = -1;
	
	@Autowired // This means to get the bean called UsuarioRepository
	// Which is auto-generated by Spring, we will use it to handle the data

    private ifrs.dev2.buyer.repositorios.UsuarioRepository repositorio;

    @PostMapping(
            value = "salvar"
            , consumes = {MediaType.APPLICATION_JSON_VALUE}
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    ) // Map ONLY POST Requests
    
    public @ResponseBody

       ifrs.dev2.buyer.respostas.UsuarioResponse Salvar (@RequestHeader HttpHeaders headers, @RequestBody ifrs.dev2.buyer.dados.Usuario entidade) throws Exception {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request

        try
        {
            if (entidade.getId() == 0){
                Cripto cripto = new Cripto();
                String senhaFechada = cripto.CifrarSenha(entidade.getSenha());
                entidade.setSenha(senhaFechada);
            }
            repositorio.save(entidade);

            return new UsuarioResponse( entidade,null,null);
        }

        catch (Exception e)
        {
            String msg = "ERROOU!";

            ErroItem item = new ErroItem("",msg,-1L);
            //ErroBase erroBase = new ErroBase(e);
            ErroBase erroBase = new ErroBase(item);

            UsuarioResponse retorno = new UsuarioResponse(null, erroBase, null) ;
            return retorno;
        }
    }


    //responsive
    @GetMapping(
            value = "pesquisar"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody

        UsuarioResponse Pesquisar(@RequestHeader HttpHeaders headers,@RequestParam String nome) {
        try
        {
            List<Usuario> retorno = null;

            if(nome.length() > 0)
            {
                retorno = repositorio.findByNomeContaining(nome);
            }
            else
            {
                retorno = repositorio.findByNomeContaining(nome);
            }

            retorno.sort(Comparator.comparing(Usuario::getNome ));

            return new UsuarioResponse( null,null,retorno);
        }
        catch(Exception e)
        {
            String msg = "ERROOU!";

            ErroItem item = new ErroItem("",msg,-1L);
            //ErroBase erroBase = new ErroBase(e);
            ErroBase erroBase = new ErroBase(item);

            UsuarioResponse retorno = new UsuarioResponse(null, erroBase, null) ;
            return retorno;
        }
    }

    @GetMapping(
            path="excluir/{id}"
            ,produces = {MediaType.APPLICATION_JSON_VALUE}
    )

    public @ResponseBody
    Usuario Excluir (@RequestHeader HttpHeaders headers, @PathVariable Long   id) {

        Usuario retorno = new Usuario();

        try
        {
            retorno  = repositorio.findById(id).get();
            repositorio.deleteById(retorno.getId());
        }

        catch (Exception e)
        {
            retorno.setId(ID_NAO_ENCONTRADO);
        }

        return retorno;
    }

    void ErroLancar() throws Exception {
        throw new Exception("ERROOU!");
    }

    @GetMapping(
            path="consultar/{id}"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody
    UsuarioResponse Consultar(@RequestHeader HttpHeaders headers, @PathVariable Long id) {

        Usuario retorno = new Usuario();
        try
        {
            retorno  = repositorio.findById(id).get();

            return new UsuarioResponse( retorno,null,null);
        }

        catch (Exception e)
        {
            retorno.setId(ID_NAO_ENCONTRADO);

            String msg = "ERROOU!";

            ErroItem item = new ErroItem("",msg,-1L);
            //ErroBase erroBase = new ErroBase(e);
            ErroBase erroBase = new ErroBase(item);

            return  new UsuarioResponse (null, erroBase, null) ;

        }

    }
        @GetMapping(
                value = "listar"
                , produces = {MediaType.APPLICATION_JSON_VALUE}
        )
        public @ResponseBody
        UsuarioResponse Listar(@RequestHeader HttpHeaders headers)
        {
            try
            {
                String nome="";
                List<Usuario> retorno = retorno = repositorio.findByNomeContaining(nome);

                retorno.sort(Comparator.comparing(Usuario::getNome ));

                return new UsuarioResponse( null,null,retorno);
            }
            catch(Exception e)
            {
                String msg = "ERROOU!";

                ErroItem item = new ErroItem("",msg,-1L);
                //ErroBase erroBase = new ErroBase(e);
                ErroBase erroBase = new ErroBase(item);

                UsuarioResponse retorno = new  UsuarioResponse(null, erroBase, null) ;
                return retorno;
            }
      }
    }






//