package ifrs.dev2.buyer.api;

import ifrs.dev2.buyer.dados.Usuario;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;



@RestController
@RequestMapping(path="/api/usuario")
public class UsuarioController  {
	
	@Autowired // This means to get the bean called UsuarioRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	
	
    private ifrs.dev2.buyer.repositorios.UsuarioRepository repositorio;

    @PostMapping(
     value = "incluir"
    ,consumes = {MediaType.APPLICATION_JSON_VALUE}
    ,produces = {MediaType.APPLICATION_JSON_VALUE}
    ) // Map ONLY POST Requests
    
    public @ResponseBody
    Usuario Incluir (@RequestBody Usuario entidade) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

       repositorio.save(entidade);

       return entidade;
    }
    
    /*@GetMapping(
            value = "pesquisar"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody
    List<Usuario> Pesquisar(@RequestParam String nome) {

        List<Usuario> retorno = repositorio.findByNomeContaining(nome);
        return retorno;
    }

    @GetMapping(
             path="consultar/{id}"
            , produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody
    Usuario Consultar(@PathVariable Long id) {

        Usuario retorno = new Usuario();
        try
        {
            retorno  = repositorio.findById(id).get();
        }

        catch (Exception e)
        {
         retorno.setId(ID_NAO_ENCONTRADO);
        }

        return retorno;
    }

    @GetMapping(
            path="excluir/{id}"
            ,produces = {MediaType.APPLICATION_JSON_VALUE}
    )
    public @ResponseBody  Usuario Excluir(@PathVariable Long   id) {

        Usuario retorno = new Usuario();
        try
        {
            retorno  = repositorio.findById(id).get();
            repositorio.deleteById(retorno.getId());
        }

        catch (Exception e)
        {
            retorno.setId(ID_NAO_ENCONTRADO);
        }

        return retorno;
    }*/
}
